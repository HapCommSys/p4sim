/* Here we print the custom header: 
header myTunnel_t {
    bit<16> proto_id;
    bit<16> dst_id;
}

struct headers {
    ethernet_t   ethernet;
    arp_t        arp;
    myTunnel_t   myTunnel;
    ipv4_t       ipv4;
}
*/

//////+by mmy: With custom Header

(p4dev-python-venv) p4@p4:~/workdir/ns3.35$ ./waf --run "p4-custom-test"
/home/p4/workdir/ns3.35/bindings/python/wscript:321: SyntaxWarning: invalid escape sequence '\d'
  m = re.match( "^castxml version (\d\.\d)(-)?(\w+)?", castxml_version_line)
Waf: Entering directory `/home/p4/workdir/ns3.35/build'
[1963/2943] Compiling contrib/p4sim/model/bridge-p4-net-device.cc
[1970/2943] Compiling contrib/p4sim/model/custom-p2p-net-device.cc
[2664/2943] Compiling contrib/p4sim/examples/p4-custom-test.cc
[2671/2943] Compiling contrib/p4sim/examples/p2p-test.cc
[2887/2943] Linking build/lib/libns3.35-p4sim-debug.so
[2888/2943] Linking build/lib/libns3.35-p4sim-test-debug.so
[2889/2943] Linking build/contrib/p4sim/examples/ns3.35-p4sim-example-debug
[2890/2943] Linking build/contrib/p4sim/examples/ns3.35-p4-basic-test-debug
[2891/2943] Linking build/contrib/p4sim/examples/ns3.35-p4-basic-test-p2p-debug
[2892/2943] Linking build/contrib/p4sim/examples/ns3.35-p4-custom-header-test-debug
[2893/2943] Linking build/contrib/p4sim/examples/ns3.35-p4-basic-example-debug
[2894/2943] Linking build/contrib/p4sim/examples/ns3.35-p4-basic-tunnel-example-debug
[2895/2943] Linking build/contrib/p4sim/examples/ns3.35-p4-p2p-custom-header-test-debug
[2896/2943] Linking build/contrib/p4sim/examples/ns3.35-p4-ipv4-forwarding-test-debug
[2897/2943] Linking build/contrib/p4sim/examples/ns3.35-p4-ipv4-forwarding-test-1-debug
[2898/2943] Linking build/contrib/p4sim/examples/ns3.35-p2p-test-debug
[2899/2943] Linking build/contrib/p4sim/examples/ns3.35-p4-custom-test-debug
[2900/2943] Linking build/scratch/subdir/subdir
[2901/2943] Linking build/scratch/simple-on-off
[2902/2943] Linking build/scratch/scratch-simulator
[2903/2943] Linking build/utils/ns3.35-test-runner-debug
Waf: Leaving directory `/home/p4/workdir/ns3.35/build'
Build commands will be stored in build/compile_commands.json
'build' finished successfully (11.973s)
*** Reading topology from file: /home/p4/workdir/ns3.35/contrib/p4sim/test/basic_tunnel/topo.txt with format: P4Topo
*** Host number: 3, Switch number: 3
*** Link from host 3 to  switch 0 with data rate  and delay 0.1ms
*** Link from host 4 to  switch 1 with data rate  and delay 0.1ms
*** Link from host 5 to  switch 2 with data rate  and delay 0.1ms
*** Link from  switch 0 to  switch 1 with data rate  and delay 0.1ms
*** Link from  switch 0 to  switch 2 with data rate  and delay 0.1ms
*** Link from  switch 1 to  switch 2 with data rate  and delay 0.1ms
Host 0 has NetDevice type: ns3::CustomP2PNetDevice
Host 0 NetDevice is CustomP2PNetDevice
Host 1 has NetDevice type: ns3::CustomP2PNetDevice
Host 1 NetDevice is CustomP2PNetDevice
Host 2 has NetDevice type: ns3::CustomP2PNetDevice
Host 2 NetDevice is CustomP2PNetDevice
host 0: connect with switch 0 port 0
host 1: connect with switch 1 port 0
host 2: connect with switch 2 port 0
switch 0 connect with: 
h0 
s1_1 
s2_1 
switch 1 connect with: 
h1 
s0_1 
s2_2 
switch 2 connect with: 
h2 
s0_2 
s1_2 
Node IP and MAC addresses:
Node 0: IP = 10.1.1.1, MAC = 00:00:00:00:00:01
Node 0: IP = 0x0a010101, MAC = 0x000000000001
Node 1: IP = 10.1.1.2, MAC = 00:00:00:00:00:03
Node 1: IP = 0x0a010102, MAC = 0x000000000003
Node 2: IP = 10.1.1.3, MAC = 00:00:00:00:00:05
Node 2: IP = 0x0a010103, MAC = 0x000000000005
*** P4Simulator mode
*** Installing P4 bridge [ 0 ]device with configuration: 
P4JsonPath = /home/p4/workdir/ns3.35/contrib/p4sim/test/basic_tunnel/basic_tunnel.json, 
FlowTablePath = /home/p4/workdir/ns3.35/contrib/p4sim/test/basic_tunnel/flowtable_0.txt, 
ViewFlowTablePath = /home/p4/workdir/ns3.35/contrib/p4sim/test/basic_tunnel/flowtable_0.txt
*** Installing P4 bridge [ 1 ]device with configuration: 
P4JsonPath = /home/p4/workdir/ns3.35/contrib/p4sim/test/basic_tunnel/basic_tunnel.json, 
FlowTablePath = /home/p4/workdir/ns3.35/contrib/p4sim/test/basic_tunnel/flowtable_1.txt, 
ViewFlowTablePath = /home/p4/workdir/ns3.35/contrib/p4sim/test/basic_tunnel/flowtable_1.txt
*** Installing P4 bridge [ 2 ]device with configuration: 
P4JsonPath = /home/p4/workdir/ns3.35/contrib/p4sim/test/basic_tunnel/basic_tunnel.json, 
FlowTablePath = /home/p4/workdir/ns3.35/contrib/p4sim/test/basic_tunnel/flowtable_2.txt, 
ViewFlowTablePath = /home/p4/workdir/ns3.35/contrib/p4sim/test/basic_tunnel/flowtable_2.txt
Host 0 NetDevice is CustomP2PNetDevice, Setting for the Tunnel Header!
Host 1 NetDevice is CustomP2PNetDevice, Setting for the Tunnel Header!
Host 2 NetDevice is CustomP2PNetDevice, Setting for the Tunnel Header!
======================= Running simulation =======================

//////+by mmy: Send the packet by application, the netdevice will modify the header (total 2 packets)
***Netdevice: Sending: before adding the custom header 
ns3::Ipv4Header (tos 0x0 DSCP Default ECN Not-ECT ttl 64 id 0 protocol 17 offset (bytes) 0 flags [none] length: 1028 10.1.1.1 > 10.1.1.2) ns3::UdpHeader (length: 1008 49153 > 12000) Payload (size=1000) 
***Netdevice: Sending: after adding the custom header 
ns3::EthernetHeader ( length/type=0x12, source=00:00:00:00:00:01, destination=ff:ff:ff:ff:ff:ff) ns3::CustomHeader (CustomHeader { proto_id: 0x800 dst_id: 0x22 }) ns3::Ipv4Header (tos 0x0 DSCP Default ECN Not-ECT ttl 64 id 0 protocol 17 offset (bytes) 0 flags [none] length: 1028 10.1.1.1 > 10.1.1.2) ns3::UdpHeader (length: 1008 49153 > 12000) Payload (size=1000) 
***Netdevice: Sending: before adding the custom header 
ns3::Ipv4Header (tos 0x0 DSCP Default ECN Not-ECT ttl 64 id 1 protocol 17 offset (bytes) 0 flags [none] length: 1028 10.1.1.1 > 10.1.1.2) ns3::UdpHeader (length: 1008 49153 > 12000) Payload (size=1000) 
***Netdevice: Sending: after adding the custom header 
ns3::EthernetHeader ( length/type=0x12, source=00:00:00:00:00:01, destination=FF:FF:FF:FF:FF:FF) ns3::CustomHeader (CustomHeader { proto_id: 0x800 dst_id: 0x22 }) ns3::Ipv4Header (tos 0x0 DSCP Default ECN Not-ECT ttl 64 id 1 protocol 17 offset (bytes) 0 flags [none] length: 1028 10.1.1.1 > 10.1.1.2) ns3::UdpHeader (length: 1008 49153 > 12000) Payload (size=1000) 

//////+by mmy: the first Switch "port" receive first (1st packet)
***Netdevice: Receive: before remove the custom header 
ns3::EthernetHeader ( length/type=0x12, source=00:00:00:00:00:01, destination=FF:FF:FF:FF:FF:FF) ns3::CustomHeader (CustomHeader { proto_id: 0x800 dst_id: 0x22 }) ns3::Ipv4Header (tos 0x0 DSCP Default ECN Not-ECT ttl 64 id 0 protocol 17 offset (bytes) 0 flags [none] length: 1028 10.1.1.1 > 10.1.1.2) ns3::UdpHeader (length: 1008 49153 > 12000) Payload (size=1000) 
***Netdevice: Receive: after remove the custom header 
ns3::EthernetHeader ( length/type=0x12, source=00:00:00:00:00:01, destination=FF:FF:FF:FF:FF:FF) ns3::CustomHeader (CustomHeader { proto_id: 0x800 dst_id: 0x22 }) ns3::Ipv4Header (tos 0x0 DSCP Default ECN Not-ECT ttl 64 id 0 protocol 17 offset (bytes) 0 flags [none] length: 1028 10.1.1.1 > 10.1.1.2) ns3::UdpHeader (length: 1008 49153 > 12000) Payload (size=1000) 
//////+by mmy: switch "port" send to switch processing part, then process by "p4"
* Switch Port *** Receive from Device: 
ns3::EthernetHeader ( length/type=0x12, source=00:00:00:00:00:01, destination=00:00:00:00:00:02) ns3::CustomHeader (CustomHeader { proto_id: 0x800 dst_id: 0x22 }) ns3::Ipv4Header (tos 0x0 DSCP Default ECN Not-ECT ttl 64 id 0 protocol 17 offset (bytes) 0 flags [none] length: 1028 10.1.1.1 > 10.1.1.2) ns3::UdpHeader (length: 1008 49153 > 12000) Payload (size=1000)
* Switch Port *** Send from Device: 
Payload (size=1046)

//////+by mmy: the first Switch "port" receive first (2nd packet)
***Netdevice: Receive: before remove the custom header 
ns3::EthernetHeader ( length/type=0x12, source=00:00:00:00:00:01, destination=FF:FF:FF:FF:FF:FF) ns3::CustomHeader (CustomHeader { proto_id: 0x800 dst_id: 0x22 }) ns3::Ipv4Header (tos 0x0 DSCP Default ECN Not-ECT ttl 64 id 1 protocol 17 offset (bytes) 0 flags [none] length: 1028 10.1.1.1 > 10.1.1.2) ns3::UdpHeader (length: 1008 49153 > 12000) Payload (size=1000) 
***Netdevice: Receive: after remove the custom header 
ns3::EthernetHeader ( length/type=0x12, source=00:00:00:00:00:01, destination=FF:FF:FF:FF:FF:FF) ns3::CustomHeader (CustomHeader { proto_id: 0x800 dst_id: 0x22 }) ns3::Ipv4Header (tos 0x0 DSCP Default ECN Not-ECT ttl 64 id 1 protocol 17 offset (bytes) 0 flags [none] length: 1028 10.1.1.1 > 10.1.1.2) ns3::UdpHeader (length: 1008 49153 > 12000) Payload (size=1000) 
//////+by mmy: switch "port" send to switch processing part, then process by "p4"
* Switch Port *** Receive from Device: 
ns3::EthernetHeader ( length/type=0x12, source=00:00:00:00:00:01, destination=00:00:00:00:00:02) ns3::CustomHeader (CustomHeader { proto_id: 0x800 dst_id: 0x22 }) ns3::Ipv4Header (tos 0x0 DSCP Default ECN Not-ECT ttl 64 id 1 protocol 17 offset (bytes) 0 flags [none] length: 1028 10.1.1.1 > 10.1.1.2) ns3::UdpHeader (length: 1008 49153 > 12000) Payload (size=1000)
* Switch Port *** Send from Device: 
Payload (size=1046)

//////+by mmy: the second Switch "port" receive (total 2 packets)
***Netdevice: Receive: before remove the custom header 
ns3::EthernetHeader ( length/type=0x12, source=00:00:00:00:00:07, destination=00:00:00:00:00:02) Payload (size=1046) 
***Netdevice: Receive: after remove the custom header 
ns3::EthernetHeader ( length/type=0x12, source=00:00:00:00:00:07, destination=00:00:00:00:00:02) Payload (size=1046) 
* Switch Port *** Receive from Device: 
ns3::EthernetHeader ( length/type=0x12, source=00:00:00:00:00:07, destination=00:00:00:00:00:08) Payload (size=1046)
* Switch Port *** Send from Device: 
Payload (size=1046)
***Netdevice: Receive: before remove the custom header 
ns3::EthernetHeader ( length/type=0x12, source=00:00:00:00:00:07, destination=00:00:00:00:00:02) Payload (size=1046) 
***Netdevice: Receive: after remove the custom header 
ns3::EthernetHeader ( length/type=0x12, source=00:00:00:00:00:07, destination=00:00:00:00:00:02) Payload (size=1046) 
* Switch Port *** Receive from Device: 
ns3::EthernetHeader ( length/type=0x12, source=00:00:00:00:00:07, destination=00:00:00:00:00:08) Payload (size=1046)
* Switch Port *** Send from Device: 
Payload (size=1046)

//////PS: because we using tunnel header, there will only 2 switches in between, with normal header will go through 3 switches.

//////+by mmy: the receiver side log -> here we remove the custom defined header
***Netdevice: Receive: before remove the custom header 
ns3::EthernetHeader ( length/type=0x12, source=00:00:00:00:00:04, destination=00:00:00:00:00:08) Payload (size=1046) 
***Netdevice: Receive: after remove the custom header 
ns3::Ipv4Header (tos 0x0 DSCP Default ECN Not-ECT ttl 64 id 0 protocol 17 offset (bytes) 0 flags [none] length: 1028 10.1.1.1 > 10.1.1.2) ns3::UdpHeader (length: 1000 49153 > 12000) Payload (size=1046) 
***Netdevice: Receive: before remove the custom header 
ns3::EthernetHeader ( length/type=0x12, source=00:00:00:00:00:04, destination=00:00:00:00:00:08) Payload (size=1046) 
***Netdevice: Receive: after remove the custom header 
ns3::Ipv4Header (tos 0x0 DSCP Default ECN Not-ECT ttl 64 id 1 protocol 17 offset (bytes) 0 flags [none] length: 1028 10.1.1.1 > 10.1.1.2) ns3::UdpHeader (length: 1000 49153 > 12000) Payload (size=1046) 
Simulate Running time: 46ms
Total Running time: 15388ms
Run successfully!
(p4dev-python-venv) p4@p4:~/workdir/ns3.35$ 



//////+by mmy: Without custom Header
(p4dev-python-venv) p4@p4:~/workdir/ns3.35$ ./waf --run "p4-custom-test"
/home/p4/workdir/ns3.35/bindings/python/wscript:321: SyntaxWarning: invalid escape sequence '\d'
  m = re.match( "^castxml version (\d\.\d)(-)?(\w+)?", castxml_version_line)
Waf: Entering directory `/home/p4/workdir/ns3.35/build'

Waf: Leaving directory `/home/p4/workdir/ns3.35/build'
Build commands will be stored in build/compile_commands.json
'build' finished successfully (0.623s)
*** Reading topology from file: /home/p4/workdir/ns3.35/contrib/p4sim/test/basic_tunnel/topo.txt with format: P4Topo
*** Host number: 3, Switch number: 3
*** Link from host 3 to  switch 0 with data rate  and delay 0.1ms
*** Link from host 4 to  switch 1 with data rate  and delay 0.1ms
*** Link from host 5 to  switch 2 with data rate  and delay 0.1ms
*** Link from  switch 0 to  switch 1 with data rate  and delay 0.1ms
*** Link from  switch 0 to  switch 2 with data rate  and delay 0.1ms
*** Link from  switch 1 to  switch 2 with data rate  and delay 0.1ms
Host 0 has NetDevice type: ns3::CustomP2PNetDevice
Host 0 NetDevice is CustomP2PNetDevice
Host 1 has NetDevice type: ns3::CustomP2PNetDevice
Host 1 NetDevice is CustomP2PNetDevice
Host 2 has NetDevice type: ns3::CustomP2PNetDevice
Host 2 NetDevice is CustomP2PNetDevice
host 0: connect with switch 0 port 0
host 1: connect with switch 1 port 0
host 2: connect with switch 2 port 0
switch 0 connect with: 
h0 
s1_1 
s2_1 
switch 1 connect with: 
h1 
s0_1 
s2_2 
switch 2 connect with: 
h2 
s0_2 
s1_2 
Node IP and MAC addresses:
Node 0: IP = 10.1.1.1, MAC = 00:00:00:00:00:01
Node 0: IP = 0x0a010101, MAC = 0x000000000001
Node 1: IP = 10.1.1.2, MAC = 00:00:00:00:00:03
Node 1: IP = 0x0a010102, MAC = 0x000000000003
Node 2: IP = 10.1.1.3, MAC = 00:00:00:00:00:05
Node 2: IP = 0x0a010103, MAC = 0x000000000005
*** P4Simulator mode
*** Installing P4 bridge [ 0 ]device with configuration: 
P4JsonPath = /home/p4/workdir/ns3.35/contrib/p4sim/test/basic_tunnel/basic_tunnel.json, 
FlowTablePath = /home/p4/workdir/ns3.35/contrib/p4sim/test/basic_tunnel/flowtable_0.txt, 
ViewFlowTablePath = /home/p4/workdir/ns3.35/contrib/p4sim/test/basic_tunnel/flowtable_0.txt
*** Installing P4 bridge [ 1 ]device with configuration: 
P4JsonPath = /home/p4/workdir/ns3.35/contrib/p4sim/test/basic_tunnel/basic_tunnel.json, 
FlowTablePath = /home/p4/workdir/ns3.35/contrib/p4sim/test/basic_tunnel/flowtable_1.txt, 
ViewFlowTablePath = /home/p4/workdir/ns3.35/contrib/p4sim/test/basic_tunnel/flowtable_1.txt
*** Installing P4 bridge [ 2 ]device with configuration: 
P4JsonPath = /home/p4/workdir/ns3.35/contrib/p4sim/test/basic_tunnel/basic_tunnel.json, 
FlowTablePath = /home/p4/workdir/ns3.35/contrib/p4sim/test/basic_tunnel/flowtable_2.txt, 
ViewFlowTablePath = /home/p4/workdir/ns3.35/contrib/p4sim/test/basic_tunnel/flowtable_2.txt
Host 0 NetDevice is CustomP2PNetDevice, Setting for the Tunnel Header!
Host 1 NetDevice is CustomP2PNetDevice, Setting for the Tunnel Header!
Host 2 NetDevice is CustomP2PNetDevice, Setting for the Tunnel Header!
======================= Running simulation =======================
***Netdevice: Sending: before adding the custom header 
ns3::Ipv4Header (tos 0x0 DSCP Default ECN Not-ECT ttl 64 id 0 protocol 17 offset (bytes) 0 flags [none] length: 1028 10.1.1.1 > 10.1.1.2) ns3::UdpHeader (length: 1008 49153 > 2000) Payload (size=1000) 
***Netdevice: Sending: before adding the custom header 
ns3::Ipv4Header (tos 0x0 DSCP Default ECN Not-ECT ttl 64 id 1 protocol 17 offset (bytes) 0 flags [none] length: 1028 10.1.1.1 > 10.1.1.2) ns3::UdpHeader (length: 1008 49153 > 2000) Payload (size=1000) 
***Netdevice: Receive: before remove the custom header 
ns3::EthernetHeader ( length/type=0x800, source=00:00:00:00:00:01, destination=ff:ff:ff:ff:ff:ff) ns3::Ipv4Header (tos 0x0 DSCP Default ECN Not-ECT ttl 64 id 0 protocol 17 offset (bytes) 0 flags [none] length: 1028 10.1.1.1 > 10.1.1.2) ns3::UdpHeader (length: 1008 49153 > 2000) Payload (size=1000) 
***Netdevice: Receive: after remove the custom header 
ns3::EthernetHeader ( length/type=0x800, source=00:00:00:00:00:01, destination=ff:ff:ff:ff:ff:ff) ns3::Ipv4Header (tos 0x0 DSCP Default ECN Not-ECT ttl 64 id 0 protocol 17 offset (bytes) 0 flags [none] length: 1028 10.1.1.1 > 10.1.1.2) ns3::UdpHeader (length: 1008 49153 > 2000) Payload (size=1000) 
* Switch Port *** Receive from Device: 
ns3::EthernetHeader ( length/type=0x800, source=00:00:00:00:00:01, destination=00:00:00:00:00:02) ns3::Ipv4Header (tos 0x0 DSCP Default ECN Not-ECT ttl 64 id 0 protocol 17 offset (bytes) 0 flags [none] length: 1028 10.1.1.1 > 10.1.1.2) ns3::UdpHeader (length: 1008 49153 > 2000) Payload (size=1000)
* Switch Port *** Send from Device: 
Payload (size=1042)
***Netdevice: Receive: before remove the custom header 
ns3::EthernetHeader ( length/type=0x800, source=00:00:00:00:00:01, destination=ff:ff:ff:ff:ff:ff) ns3::Ipv4Header (tos 0x0 DSCP Default ECN Not-ECT ttl 64 id 1 protocol 17 offset (bytes) 0 flags [none] length: 1028 10.1.1.1 > 10.1.1.2) ns3::UdpHeader (length: 1008 49153 > 2000) Payload (size=1000) 
***Netdevice: Receive: after remove the custom header 
ns3::EthernetHeader ( length/type=0x800, source=00:00:00:00:00:01, destination=ff:ff:ff:ff:ff:ff) ns3::Ipv4Header (tos 0x0 DSCP Default ECN Not-ECT ttl 64 id 1 protocol 17 offset (bytes) 0 flags [none] length: 1028 10.1.1.1 > 10.1.1.2) ns3::UdpHeader (length: 1008 49153 > 2000) Payload (size=1000) 
* Switch Port *** Receive from Device: 
ns3::EthernetHeader ( length/type=0x800, source=00:00:00:00:00:01, destination=00:00:00:00:00:02) ns3::Ipv4Header (tos 0x0 DSCP Default ECN Not-ECT ttl 64 id 1 protocol 17 offset (bytes) 0 flags [none] length: 1028 10.1.1.1 > 10.1.1.2) ns3::UdpHeader (length: 1008 49153 > 2000) Payload (size=1000)
* Switch Port *** Send from Device: 
Payload (size=1042)
***Netdevice: Receive: before remove the custom header 
ns3::EthernetHeader ( length/type=0x800, source=00:00:00:00:00:09, destination=00:00:00:00:00:02) Payload (size=1042) 
***Netdevice: Receive: after remove the custom header 
ns3::EthernetHeader ( length/type=0x800, source=00:00:00:00:00:09, destination=00:00:00:00:00:02) Payload (size=1042) 
* Switch Port *** Receive from Device: 
ns3::EthernetHeader ( length/type=0x800, source=00:00:00:00:00:09, destination=00:00:00:00:00:0a) Payload (size=1042)
* Switch Port *** Send from Device: 
Payload (size=1042)
***Netdevice: Receive: before remove the custom header 
ns3::EthernetHeader ( length/type=0x800, source=00:00:00:00:00:09, destination=00:00:00:00:00:02) Payload (size=1042) 
***Netdevice: Receive: after remove the custom header 
ns3::EthernetHeader ( length/type=0x800, source=00:00:00:00:00:09, destination=00:00:00:00:00:02) Payload (size=1042) 
* Switch Port *** Receive from Device: 
ns3::EthernetHeader ( length/type=0x800, source=00:00:00:00:00:09, destination=00:00:00:00:00:0a) Payload (size=1042)
* Switch Port *** Send from Device: 
Payload (size=1042)
***Netdevice: Receive: before remove the custom header 
ns3::EthernetHeader ( length/type=0x800, source=00:00:00:00:00:0c, destination=00:00:00:00:00:0a) Payload (size=1042) 
***Netdevice: Receive: after remove the custom header 
ns3::EthernetHeader ( length/type=0x800, source=00:00:00:00:00:0c, destination=00:00:00:00:00:0a) Payload (size=1042) 
* Switch Port *** Receive from Device: 
ns3::EthernetHeader ( length/type=0x800, source=00:00:00:00:00:0c, destination=00:00:00:00:00:0b) Payload (size=1042)
* Switch Port *** Send from Device: 
Payload (size=1042)
***Netdevice: Receive: before remove the custom header 
ns3::EthernetHeader ( length/type=0x800, source=00:00:00:00:00:0c, destination=00:00:00:00:00:0a) Payload (size=1042) 
***Netdevice: Receive: after remove the custom header 
ns3::EthernetHeader ( length/type=0x800, source=00:00:00:00:00:0c, destination=00:00:00:00:00:0a) Payload (size=1042) 
* Switch Port *** Receive from Device: 
ns3::EthernetHeader ( length/type=0x800, source=00:00:00:00:00:0c, destination=00:00:00:00:00:0b) Payload (size=1042)
* Switch Port *** Send from Device: 
Payload (size=1042)
***Netdevice: Receive: before remove the custom header 
ns3::EthernetHeader ( length/type=0x800, source=00:00:00:00:00:04, destination=00:00:00:00:00:0b) Payload (size=1042) 
***Netdevice: Receive: after remove the custom header 
ns3::Ipv4Header (tos 0x0 DSCP Default ECN Not-ECT ttl 61 id 0 protocol 17 offset (bytes) 0 flags [none] length: 1028 10.1.1.1 > 10.1.1.2) ns3::UdpHeader (length: 1000 49153 > 2000) Payload (size=1042) 
***Netdevice: Receive: before remove the custom header 
ns3::EthernetHeader ( length/type=0x800, source=00:00:00:00:00:04, destination=00:00:00:00:00:0b) Payload (size=1042) 
***Netdevice: Receive: after remove the custom header 
ns3::Ipv4Header (tos 0x0 DSCP Default ECN Not-ECT ttl 61 id 1 protocol 17 offset (bytes) 0 flags [none] length: 1028 10.1.1.1 > 10.1.1.2) ns3::UdpHeader (length: 1000 49153 > 2000) Payload (size=1042) 
Simulate Running time: 47ms
Total Running time: 15499ms
Run successfully!
(p4dev-python-venv) p4@p4:~/workdir/ns3.35$ 